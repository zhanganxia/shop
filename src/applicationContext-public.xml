<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	 http://www.springframework.org/schema/tx 
	 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	 http://www.springframework.org/schema/aop 
	 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
<!-- 
	1.搭建Spring的开发环境
		1.1：添加配置文件，和相应的Spring-3.2-core.jar包
		1.2：创建Date对象，如果成功则Spring的环境OK
		1.3：通过Spring Junit测试实例化Date
		
	2.搭建Hibernate的开发环境 
		2.1：添加配置文件，和相应的Hibernate-3.6.jar包+Mysql驱动包
		2.2：分析cn.it.shop.util.HibernateSessionFactory的作用，加载Hibernate配置文件，创建session
		2.3：通过表逆向生成model、orm映射文件
		2.4: 创建service,通过 new的方式执行数据入库，在JEE6中会报错出现Unable to build the default ValidatorFactory
		 解决方案：在hibernate.cfg.xml文件中添加配置 <property name="javax.persistence.validation.mode">none</property> 
		
	3.Spring与Hiberbnate的整合 (采用AOP来管理事务实现声明式事务)
		3.1：添加Spring-3.2.aop.jar  spring-3.2-persistence.jar c3p0.jar
		3.2: 配置数据源com.mchange.v2.c3p0.ComboPooledDataSource
		3.3: 采用SessionFactory取代：HibernateTemplate
		3.4: 配置事务管理器，管理SessionFactory,这样所有的session将会有声明式事务
		3.5： 配置advice(通知):通知是指定了那些方法需要什么类型的事务模式
		3.6： 配置 AOP切面表达式
		3.7： 让Service交给Spring管理，并且依赖sessionFactory.如果能插入数据，则说明事务ok
	4.搭建Struts的开发环境	
		4.1：添加配置文件，和相应的struts-2.3.jar包，并且在web.xml中配置一个过滤器 StrutsPrepareAndExecuteFilter
		4.2: 创建Action，并且配置到struts.xml中
		4.3：通过jsp访问Action，如果Action可以创建，则代表环境ok
		4.4: 默认在没有整个的时候创建Action的工厂为：(struts) for (com.opensymphony.xwork2.ObjectFactory)
	5.创建Spring与Struts整合环境（采用Spring来管理Action，这样Action的依赖就能够注入进来）
		5.1：添加Spring-web.jar 里面包括： struts2-spring-plugin-2.1.6.jar
		5.2：把Action交给Spring管理，配置在：/shop/src/applicationContext-action.xml
		5.3：在Struts.xml中class对应的是Spring中配置action的id值
		5.4： 在web.xml中配置监听器ContextLoaderListener，启动时加载Spring的配置文件
			(spring) for (com.opensymphony.xwork2.ObjectFactory)
		
 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/shop"/>
		<property name="user" value="root"/>
		<property name="password" value="root"/>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/><!-- 加载 hibernate配置文件-->
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置aop表达式 -->
	<aop:config>	
		<!-- 配置哪些包的类要切入事务：此表达式表示service.impl中类下的方式都要切入事务 -->
		<aop:pointcut id="pointcut" expression="execution(* cn.it.shop.service.impl.*.*(..))"/>
		<!-- 通知+切面表达式。才是完整的事务切入路径 -->
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	</aop:config>
	
</beans>